# coding: utf-8

"""
    pix_recebimentos

    APis Pix Recebimentos para Clientes (regulatórias).   # noqa: E501

    OpenAPI spec version: 1.40.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pix_recebimento_itau.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def d_elete_webhookchave(self, chave, **kwargs):  # noqa: E501
        """d_elete_webhookchave  # noqa: E501

        Operação responsável por deletar webhook para aviso de recebimentos pix por chave  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_elete_webhookchave(chave, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chave: Chave de endereçamento do recebedor (required)
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.d_elete_webhookchave_with_http_info(chave, **kwargs)  # noqa: E501
        else:
            (data) = self.d_elete_webhookchave_with_http_info(chave, **kwargs)  # noqa: E501
            return data

    def d_elete_webhookchave_with_http_info(self, chave, **kwargs):  # noqa: E501
        """d_elete_webhookchave  # noqa: E501

        Operação responsável por deletar webhook para aviso de recebimentos pix por chave  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_elete_webhookchave_with_http_info(chave, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chave: Chave de endereçamento do recebedor (required)
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chave', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method d_elete_webhookchave" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chave' is set
        if ('chave' not in params or
                params['chave'] is None):
            raise ValueError("Missing the required parameter `chave` when calling `d_elete_webhookchave`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chave' in params:
            path_params['chave'] = params['chave']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_correlation_id' in params:
            header_params['x-correlationID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuthAccessCode', 'OAuthImplicit']  # noqa: E501

        return self.api_client.call_api(
            '/webhook/{chave}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_et_cob(self, inicio, fim, **kwargs):  # noqa: E501
        """g_et_cob  # noqa: E501

        Operação responsável por recuperar os dados de documentos de acordo com os filtros enviados  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_cob(inicio, fim, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inicio: Data início da criação da cobrança, no formato '2020-06-01T09:00' (required)
        :param str fim: Data fim da criação da Cobrança, no formato '2020-06-01T09:00' (required)
        :param str cpf: CPF do pagador cadastrado na cobrança.
        :param str cnpj: CNPJ do pagador cadastrado na cobrança.
        :param str status: Filtro pelo status da cobrança. Pode ser ATIVA, CONCLUIDA, REMOVIDA_PELO_PSP OU REMOVIDA_PELO_USUARIO_RECEBEDOR
        :param str paginacao_pagina_atual: Numero da Página que deseja realizar o acesso, valor considerado por default 0.
        :param str paginacao_itens_por_pagina: Quantidade de ocorrência retornadas por pagina, valor por default 100.
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: Cobrancas
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_et_cob_with_http_info(inicio, fim, **kwargs)  # noqa: E501
        else:
            (data) = self.g_et_cob_with_http_info(inicio, fim, **kwargs)  # noqa: E501
            return data

    def g_et_cob_with_http_info(self, inicio, fim, **kwargs):  # noqa: E501
        """g_et_cob  # noqa: E501

        Operação responsável por recuperar os dados de documentos de acordo com os filtros enviados  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_cob_with_http_info(inicio, fim, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inicio: Data início da criação da cobrança, no formato '2020-06-01T09:00' (required)
        :param str fim: Data fim da criação da Cobrança, no formato '2020-06-01T09:00' (required)
        :param str cpf: CPF do pagador cadastrado na cobrança.
        :param str cnpj: CNPJ do pagador cadastrado na cobrança.
        :param str status: Filtro pelo status da cobrança. Pode ser ATIVA, CONCLUIDA, REMOVIDA_PELO_PSP OU REMOVIDA_PELO_USUARIO_RECEBEDOR
        :param str paginacao_pagina_atual: Numero da Página que deseja realizar o acesso, valor considerado por default 0.
        :param str paginacao_itens_por_pagina: Quantidade de ocorrência retornadas por pagina, valor por default 100.
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: Cobrancas
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inicio', 'fim', 'cpf', 'cnpj', 'status', 'paginacao_pagina_atual', 'paginacao_itens_por_pagina', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_et_cob" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'inicio' is set
        if ('inicio' not in params or
                params['inicio'] is None):
            raise ValueError("Missing the required parameter `inicio` when calling `g_et_cob`")  # noqa: E501
        # verify the required parameter 'fim' is set
        if ('fim' not in params or
                params['fim'] is None):
            raise ValueError("Missing the required parameter `fim` when calling `g_et_cob`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'inicio' in params:
            query_params.append(('inicio', params['inicio']))  # noqa: E501
        if 'fim' in params:
            query_params.append(('fim', params['fim']))  # noqa: E501
        if 'cpf' in params:
            query_params.append(('cpf', params['cpf']))  # noqa: E501
        if 'cnpj' in params:
            query_params.append(('cnpj', params['cnpj']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'paginacao_pagina_atual' in params:
            query_params.append(('paginacao.paginaAtual', params['paginacao_pagina_atual']))  # noqa: E501
        if 'paginacao_itens_por_pagina' in params:
            query_params.append(('paginacao.itensPorPagina', params['paginacao_itens_por_pagina']))  # noqa: E501

        header_params = {}
        if 'x_correlation_id' in params:
            header_params['x-correlationID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuthAccessCode', 'OAuthImplicit']  # noqa: E501

        return self.api_client.call_api(
            '/cob', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cobrancas',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_et_cobtxid(self, txid, **kwargs):  # noqa: E501
        """g_et_cobtxid  # noqa: E501

        Operação responsável por recuperar os dados do documento pelo id transacional  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_cobtxid(txid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str txid: Txid a ser consultado. (required)
        :param str revisao: Id de transaçao do documento, utilizado para a sua identificação no banco central
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: Cobranca
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_et_cobtxid_with_http_info(txid, **kwargs)  # noqa: E501
        else:
            (data) = self.g_et_cobtxid_with_http_info(txid, **kwargs)  # noqa: E501
            return data

    def g_et_cobtxid_with_http_info(self, txid, **kwargs):  # noqa: E501
        """g_et_cobtxid  # noqa: E501

        Operação responsável por recuperar os dados do documento pelo id transacional  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_cobtxid_with_http_info(txid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str txid: Txid a ser consultado. (required)
        :param str revisao: Id de transaçao do documento, utilizado para a sua identificação no banco central
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: Cobranca
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['txid', 'revisao', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_et_cobtxid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'txid' is set
        if ('txid' not in params or
                params['txid'] is None):
            raise ValueError("Missing the required parameter `txid` when calling `g_et_cobtxid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'txid' in params:
            path_params['txid'] = params['txid']  # noqa: E501

        query_params = []
        if 'revisao' in params:
            query_params.append(('revisao', params['revisao']))  # noqa: E501

        header_params = {}
        if 'x_correlation_id' in params:
            header_params['x-correlationID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuthAccessCode', 'OAuthImplicit']  # noqa: E501

        return self.api_client.call_api(
            '/cob/{txid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Cobranca',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_et_cobtxidqrcode(self, txid, **kwargs):  # noqa: E501
        """g_et_cobtxidqrcode  # noqa: E501

        Operação responsável por recuperar os dados do documento  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_cobtxidqrcode(txid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str txid: Txid a ser consultado. (required)
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: Qrcode
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_et_cobtxidqrcode_with_http_info(txid, **kwargs)  # noqa: E501
        else:
            (data) = self.g_et_cobtxidqrcode_with_http_info(txid, **kwargs)  # noqa: E501
            return data

    def g_et_cobtxidqrcode_with_http_info(self, txid, **kwargs):  # noqa: E501
        """g_et_cobtxidqrcode  # noqa: E501

        Operação responsável por recuperar os dados do documento  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_cobtxidqrcode_with_http_info(txid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str txid: Txid a ser consultado. (required)
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: Qrcode
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['txid', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_et_cobtxidqrcode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'txid' is set
        if ('txid' not in params or
                params['txid'] is None):
            raise ValueError("Missing the required parameter `txid` when calling `g_et_cobtxidqrcode`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'txid' in params:
            path_params['txid'] = params['txid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_correlation_id' in params:
            header_params['x-correlationID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuthAccessCode', 'OAuthImplicit']  # noqa: E501

        return self.api_client.call_api(
            '/cob/{txid}/qrcode', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Qrcode',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_et_pix(self, inicio, fim, **kwargs):  # noqa: E501
        """g_et_pix  # noqa: E501

        Operação responsável por recuperar os dados de documentos de acordo com os filtros enviados  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_pix(inicio, fim, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inicio: Data início da criação da cobrança, no formato '2020-06-01T09:00' (required)
        :param str fim: Data fim da criação da Cobrança, no formato '2020-06-01T09:00' (required)
        :param str txid: ID de identificação do documento entre os bancos e o cliente emissor. O campo txid é obrigatório e determina o identificador da transação.O objetivo desse campo é ser um elemento que possibilite a conciliação de pagamentos. O txid é criado exclusivamente pelo usuário recebedor e está sob sua responsabilidade. Deve ser único por CNPJ do recebedor. Apesar de possuir o tamanho de 35 posições (PAC008), para QR Code Estático o tamanho máximo permitido é de 25 posições (limitação EMV). No caso do QR Code dinâmico o campo deve possuir de 26 posição até 35 posições. Os caracteres permitidos no contexto do Pix para o campo txId são:Letras minúsculas, de ‘a’ a ‘z’, Letras maiúsculas, de ‘A’ a ‘Z’, Dígitos decimais, de ‘0’ a ‘9’
        :param str cpf: CPF do pagador cadastrado na cobrança
        :param str cnpj: CNPJ do pagador cadastrado na cobrança.
        :param str paginacao_pagina_atual: Numero da Página que deseja realizar o acesso, valor considerado por default 0.
        :param str paginacao_itens_por_pagina: Quantidade de ocorrência retornadas por pagina, valor por default 100.
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: Pixs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_et_pix_with_http_info(inicio, fim, **kwargs)  # noqa: E501
        else:
            (data) = self.g_et_pix_with_http_info(inicio, fim, **kwargs)  # noqa: E501
            return data

    def g_et_pix_with_http_info(self, inicio, fim, **kwargs):  # noqa: E501
        """g_et_pix  # noqa: E501

        Operação responsável por recuperar os dados de documentos de acordo com os filtros enviados  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_pix_with_http_info(inicio, fim, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inicio: Data início da criação da cobrança, no formato '2020-06-01T09:00' (required)
        :param str fim: Data fim da criação da Cobrança, no formato '2020-06-01T09:00' (required)
        :param str txid: ID de identificação do documento entre os bancos e o cliente emissor. O campo txid é obrigatório e determina o identificador da transação.O objetivo desse campo é ser um elemento que possibilite a conciliação de pagamentos. O txid é criado exclusivamente pelo usuário recebedor e está sob sua responsabilidade. Deve ser único por CNPJ do recebedor. Apesar de possuir o tamanho de 35 posições (PAC008), para QR Code Estático o tamanho máximo permitido é de 25 posições (limitação EMV). No caso do QR Code dinâmico o campo deve possuir de 26 posição até 35 posições. Os caracteres permitidos no contexto do Pix para o campo txId são:Letras minúsculas, de ‘a’ a ‘z’, Letras maiúsculas, de ‘A’ a ‘Z’, Dígitos decimais, de ‘0’ a ‘9’
        :param str cpf: CPF do pagador cadastrado na cobrança
        :param str cnpj: CNPJ do pagador cadastrado na cobrança.
        :param str paginacao_pagina_atual: Numero da Página que deseja realizar o acesso, valor considerado por default 0.
        :param str paginacao_itens_por_pagina: Quantidade de ocorrência retornadas por pagina, valor por default 100.
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: Pixs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inicio', 'fim', 'txid', 'cpf', 'cnpj', 'paginacao_pagina_atual', 'paginacao_itens_por_pagina', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_et_pix" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'inicio' is set
        if ('inicio' not in params or
                params['inicio'] is None):
            raise ValueError("Missing the required parameter `inicio` when calling `g_et_pix`")  # noqa: E501
        # verify the required parameter 'fim' is set
        if ('fim' not in params or
                params['fim'] is None):
            raise ValueError("Missing the required parameter `fim` when calling `g_et_pix`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'inicio' in params:
            query_params.append(('inicio', params['inicio']))  # noqa: E501
        if 'fim' in params:
            query_params.append(('fim', params['fim']))  # noqa: E501
        if 'txid' in params:
            query_params.append(('txid', params['txid']))  # noqa: E501
        if 'cpf' in params:
            query_params.append(('cpf', params['cpf']))  # noqa: E501
        if 'cnpj' in params:
            query_params.append(('cnpj', params['cnpj']))  # noqa: E501
        if 'paginacao_pagina_atual' in params:
            query_params.append(('paginacao.paginaAtual', params['paginacao_pagina_atual']))  # noqa: E501
        if 'paginacao_itens_por_pagina' in params:
            query_params.append(('paginacao.itensPorPagina', params['paginacao_itens_por_pagina']))  # noqa: E501

        header_params = {}
        if 'x_correlation_id' in params:
            header_params['x-correlationID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuthAccessCode', 'OAuthImplicit']  # noqa: E501

        return self.api_client.call_api(
            '/pix', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pixs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_et_pixe2eid(self, e2eid, **kwargs):  # noqa: E501
        """g_et_pixe2eid  # noqa: E501

        Operação responsável por recuperar os dados do documento pelo id transacional  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_pixe2eid(e2eid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str e2eid: Id fim a fim da transação. (required)
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: Pix
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_et_pixe2eid_with_http_info(e2eid, **kwargs)  # noqa: E501
        else:
            (data) = self.g_et_pixe2eid_with_http_info(e2eid, **kwargs)  # noqa: E501
            return data

    def g_et_pixe2eid_with_http_info(self, e2eid, **kwargs):  # noqa: E501
        """g_et_pixe2eid  # noqa: E501

        Operação responsável por recuperar os dados do documento pelo id transacional  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_pixe2eid_with_http_info(e2eid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str e2eid: Id fim a fim da transação. (required)
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: Pix
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['e2eid', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_et_pixe2eid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'e2eid' is set
        if ('e2eid' not in params or
                params['e2eid'] is None):
            raise ValueError("Missing the required parameter `e2eid` when calling `g_et_pixe2eid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'e2eid' in params:
            path_params['e2eid'] = params['e2eid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_correlation_id' in params:
            header_params['x-correlationID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuthAccessCode', 'OAuthImplicit']  # noqa: E501

        return self.api_client.call_api(
            '/pix/{e2eid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Pix',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_et_pixe2eiddevolucaoid(self, e2eid, id, **kwargs):  # noqa: E501
        """g_et_pixe2eiddevolucaoid  # noqa: E501

        Operação responsavel por resgatar um pagamento específico para o PIX.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_pixe2eiddevolucaoid(e2eid, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str e2eid: Id fim a fim da transação. (required)
        :param str id: id da devolução (required)
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: DevolucaoPix
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_et_pixe2eiddevolucaoid_with_http_info(e2eid, id, **kwargs)  # noqa: E501
        else:
            (data) = self.g_et_pixe2eiddevolucaoid_with_http_info(e2eid, id, **kwargs)  # noqa: E501
            return data

    def g_et_pixe2eiddevolucaoid_with_http_info(self, e2eid, id, **kwargs):  # noqa: E501
        """g_et_pixe2eiddevolucaoid  # noqa: E501

        Operação responsavel por resgatar um pagamento específico para o PIX.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_pixe2eiddevolucaoid_with_http_info(e2eid, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str e2eid: Id fim a fim da transação. (required)
        :param str id: id da devolução (required)
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: DevolucaoPix
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['e2eid', 'id', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_et_pixe2eiddevolucaoid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'e2eid' is set
        if ('e2eid' not in params or
                params['e2eid'] is None):
            raise ValueError("Missing the required parameter `e2eid` when calling `g_et_pixe2eiddevolucaoid`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `g_et_pixe2eiddevolucaoid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'e2eid' in params:
            path_params['e2eid'] = params['e2eid']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_correlation_id' in params:
            header_params['x-correlationID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuthAccessCode', 'OAuthImplicit']  # noqa: E501

        return self.api_client.call_api(
            '/pix/{e2eid}/devolucao/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DevolucaoPix',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_et_webhook(self, inicio, fim, **kwargs):  # noqa: E501
        """g_et_webhook  # noqa: E501

        Operação responsável por resgatar webhooks de aviso de recebimentos pix para um parceiro  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_webhook(inicio, fim, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inicio: Data de inicio da pesquisa de webhooks, no formato de acordo com RFC3339 (required)
        :param str fim: Data fim da pesquisa de webhooks, no formato de acordo com RFC3339 (required)
        :param str paginacao_pagina_atual: Numero da Página que deseja realizar o acesso, valor considerado por default 0
        :param str paginacao_itens_por_pagina: Quantidade de ocorrência retornadas por pagina, valor por default 100
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :param str status_code: Define Status Code Sandbox
        :return: Webhooks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_et_webhook_with_http_info(inicio, fim, **kwargs)  # noqa: E501
        else:
            (data) = self.g_et_webhook_with_http_info(inicio, fim, **kwargs)  # noqa: E501
            return data

    def g_et_webhook_with_http_info(self, inicio, fim, **kwargs):  # noqa: E501
        """g_et_webhook  # noqa: E501

        Operação responsável por resgatar webhooks de aviso de recebimentos pix para um parceiro  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_webhook_with_http_info(inicio, fim, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str inicio: Data de inicio da pesquisa de webhooks, no formato de acordo com RFC3339 (required)
        :param str fim: Data fim da pesquisa de webhooks, no formato de acordo com RFC3339 (required)
        :param str paginacao_pagina_atual: Numero da Página que deseja realizar o acesso, valor considerado por default 0
        :param str paginacao_itens_por_pagina: Quantidade de ocorrência retornadas por pagina, valor por default 100
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :param str status_code: Define Status Code Sandbox
        :return: Webhooks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['inicio', 'fim', 'paginacao_pagina_atual', 'paginacao_itens_por_pagina', 'x_correlation_id', 'status_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_et_webhook" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'inicio' is set
        if ('inicio' not in params or
                params['inicio'] is None):
            raise ValueError("Missing the required parameter `inicio` when calling `g_et_webhook`")  # noqa: E501
        # verify the required parameter 'fim' is set
        if ('fim' not in params or
                params['fim'] is None):
            raise ValueError("Missing the required parameter `fim` when calling `g_et_webhook`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'inicio' in params:
            query_params.append(('inicio', params['inicio']))  # noqa: E501
        if 'fim' in params:
            query_params.append(('fim', params['fim']))  # noqa: E501
        if 'paginacao_pagina_atual' in params:
            query_params.append(('paginacao.paginaAtual', params['paginacao_pagina_atual']))  # noqa: E501
        if 'paginacao_itens_por_pagina' in params:
            query_params.append(('paginacao.itensPorPagina', params['paginacao_itens_por_pagina']))  # noqa: E501
        if 'status_code' in params:
            query_params.append(('status_code', params['status_code']))  # noqa: E501

        header_params = {}
        if 'x_correlation_id' in params:
            header_params['x-correlationID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuthAccessCode', 'OAuthImplicit']  # noqa: E501

        return self.api_client.call_api(
            '/webhook', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhooks',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def g_et_webhookchave(self, chave, **kwargs):  # noqa: E501
        """g_et_webhookchave  # noqa: E501

        Operação responsável por resgatar webhook de aviso de recebimentos pix por chave  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_webhookchave(chave, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chave: Chave de endereçamento do recebedor (required)
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.g_et_webhookchave_with_http_info(chave, **kwargs)  # noqa: E501
        else:
            (data) = self.g_et_webhookchave_with_http_info(chave, **kwargs)  # noqa: E501
            return data

    def g_et_webhookchave_with_http_info(self, chave, **kwargs):  # noqa: E501
        """g_et_webhookchave  # noqa: E501

        Operação responsável por resgatar webhook de aviso de recebimentos pix por chave  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.g_et_webhookchave_with_http_info(chave, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chave: Chave de endereçamento do recebedor (required)
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: Webhook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chave', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_et_webhookchave" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chave' is set
        if ('chave' not in params or
                params['chave'] is None):
            raise ValueError("Missing the required parameter `chave` when calling `g_et_webhookchave`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chave' in params:
            path_params['chave'] = params['chave']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_correlation_id' in params:
            header_params['x-correlationID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuthAccessCode', 'OAuthImplicit']  # noqa: E501

        return self.api_client.call_api(
            '/webhook/{chave}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Webhook',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_atch_cobtxid(self, txid, **kwargs):  # noqa: E501
        """p_atch_cobtxid  # noqa: E501

        Operação responsável por revisar uma cobranca  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_atch_cobtxid(txid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str txid: Txid a ser consultado. (required)
        :param CobrancaPatchRequest body: Objeto cobranca a ser revisado
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: CobrancaPatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_atch_cobtxid_with_http_info(txid, **kwargs)  # noqa: E501
        else:
            (data) = self.p_atch_cobtxid_with_http_info(txid, **kwargs)  # noqa: E501
            return data

    def p_atch_cobtxid_with_http_info(self, txid, **kwargs):  # noqa: E501
        """p_atch_cobtxid  # noqa: E501

        Operação responsável por revisar uma cobranca  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_atch_cobtxid_with_http_info(txid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str txid: Txid a ser consultado. (required)
        :param CobrancaPatchRequest body: Objeto cobranca a ser revisado
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: CobrancaPatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['txid', 'body', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_atch_cobtxid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'txid' is set
        if ('txid' not in params or
                params['txid'] is None):
            raise ValueError("Missing the required parameter `txid` when calling `p_atch_cobtxid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'txid' in params:
            path_params['txid'] = params['txid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_correlation_id' in params:
            header_params['x-correlationID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuthAccessCode', 'OAuthImplicit']  # noqa: E501

        return self.api_client.call_api(
            '/cob/{txid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CobrancaPatchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_ut_cobtxid(self, txid, **kwargs):  # noqa: E501
        """p_ut_cobtxid  # noqa: E501

        Operação responsável por incluir uma nova cobranca  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ut_cobtxid(txid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str txid: Txid a ser consultado. (required)
        :param CobrancaPutRequest body: Objeto cobranca a ser criado
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: CobrancaPutResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_ut_cobtxid_with_http_info(txid, **kwargs)  # noqa: E501
        else:
            (data) = self.p_ut_cobtxid_with_http_info(txid, **kwargs)  # noqa: E501
            return data

    def p_ut_cobtxid_with_http_info(self, txid, **kwargs):  # noqa: E501
        """p_ut_cobtxid  # noqa: E501

        Operação responsável por incluir uma nova cobranca  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ut_cobtxid_with_http_info(txid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str txid: Txid a ser consultado. (required)
        :param CobrancaPutRequest body: Objeto cobranca a ser criado
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: CobrancaPutResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['txid', 'body', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_ut_cobtxid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'txid' is set
        if ('txid' not in params or
                params['txid'] is None):
            raise ValueError("Missing the required parameter `txid` when calling `p_ut_cobtxid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'txid' in params:
            path_params['txid'] = params['txid']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_correlation_id' in params:
            header_params['x-correlationID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuthAccessCode', 'OAuthImplicit']  # noqa: E501

        return self.api_client.call_api(
            '/cob/{txid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CobrancaPutResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_ut_pixe2eiddevolucaoid(self, e2eid, id, **kwargs):  # noqa: E501
        """p_ut_pixe2eiddevolucaoid  # noqa: E501

        Operação responsável por solicitar um nova devolução, por meio do e2eid e do ID da devolução  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ut_pixe2eiddevolucaoid(e2eid, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str e2eid: Id fim a fim da transação. (required)
        :param str id: id da devolução (required)
        :param DevolucaoPutRequest body: Objeto de devolução cobranca a ser solicitado
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: DevolucaoPutResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_ut_pixe2eiddevolucaoid_with_http_info(e2eid, id, **kwargs)  # noqa: E501
        else:
            (data) = self.p_ut_pixe2eiddevolucaoid_with_http_info(e2eid, id, **kwargs)  # noqa: E501
            return data

    def p_ut_pixe2eiddevolucaoid_with_http_info(self, e2eid, id, **kwargs):  # noqa: E501
        """p_ut_pixe2eiddevolucaoid  # noqa: E501

        Operação responsável por solicitar um nova devolução, por meio do e2eid e do ID da devolução  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ut_pixe2eiddevolucaoid_with_http_info(e2eid, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str e2eid: Id fim a fim da transação. (required)
        :param str id: id da devolução (required)
        :param DevolucaoPutRequest body: Objeto de devolução cobranca a ser solicitado
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: DevolucaoPutResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['e2eid', 'id', 'body', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_ut_pixe2eiddevolucaoid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'e2eid' is set
        if ('e2eid' not in params or
                params['e2eid'] is None):
            raise ValueError("Missing the required parameter `e2eid` when calling `p_ut_pixe2eiddevolucaoid`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `p_ut_pixe2eiddevolucaoid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'e2eid' in params:
            path_params['e2eid'] = params['e2eid']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_correlation_id' in params:
            header_params['x-correlationID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuthAccessCode', 'OAuthImplicit']  # noqa: E501

        return self.api_client.call_api(
            '/pix/{e2eid}/devolucao/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DevolucaoPutResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def p_ut_webhookchave(self, chave, **kwargs):  # noqa: E501
        """p_ut_webhookchave  # noqa: E501

        Operação responsável por cadastrar webhook para aviso de recebimentos pix por chave  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ut_webhookchave(chave, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chave: Chave de endereçamento do recebedor (required)
        :param Webhook body: Objeto de webhook a ser solicitado
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.p_ut_webhookchave_with_http_info(chave, **kwargs)  # noqa: E501
        else:
            (data) = self.p_ut_webhookchave_with_http_info(chave, **kwargs)  # noqa: E501
            return data

    def p_ut_webhookchave_with_http_info(self, chave, **kwargs):  # noqa: E501
        """p_ut_webhookchave  # noqa: E501

        Operação responsável por cadastrar webhook para aviso de recebimentos pix por chave  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.p_ut_webhookchave_with_http_info(chave, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chave: Chave de endereçamento do recebedor (required)
        :param Webhook body: Objeto de webhook a ser solicitado
        :param str x_correlation_id: Identificador de correlação que serve como um agrupar dentro da estrutura de audit trail
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chave', 'body', 'x_correlation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method p_ut_webhookchave" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chave' is set
        if ('chave' not in params or
                params['chave'] is None):
            raise ValueError("Missing the required parameter `chave` when calling `p_ut_webhookchave`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chave' in params:
            path_params['chave'] = params['chave']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_correlation_id' in params:
            header_params['x-correlationID'] = params['x_correlation_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuthAccessCode', 'OAuthImplicit']  # noqa: E501

        return self.api_client.call_api(
            '/webhook/{chave}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
