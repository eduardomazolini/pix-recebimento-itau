# coding: utf-8

"""
    pix_recebimentos

    APis Pix Recebimentos para Clientes (regulat√≥rias).   # noqa: E501

    OpenAPI spec version: 1.40.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Qrcode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'imagem_base64': 'str',
        'pix_link': 'str',
        'emv': 'str'
    }

    attribute_map = {
        'imagem_base64': 'imagem_base64',
        'pix_link': 'pix_link',
        'emv': 'emv'
    }

    def __init__(self, imagem_base64=None, pix_link=None, emv=None):  # noqa: E501
        """Qrcode - a model defined in Swagger"""  # noqa: E501

        self._imagem_base64 = None
        self._pix_link = None
        self._emv = None
        self.discriminator = None

        if imagem_base64 is not None:
            self.imagem_base64 = imagem_base64
        if pix_link is not None:
            self.pix_link = pix_link
        if emv is not None:
            self.emv = emv

    @property
    def imagem_base64(self):
        """Gets the imagem_base64 of this Qrcode.  # noqa: E501

        Imagem em base64 do QRCODE PIX  # noqa: E501

        :return: The imagem_base64 of this Qrcode.  # noqa: E501
        :rtype: str
        """
        return self._imagem_base64

    @imagem_base64.setter
    def imagem_base64(self, imagem_base64):
        """Sets the imagem_base64 of this Qrcode.

        Imagem em base64 do QRCODE PIX  # noqa: E501

        :param imagem_base64: The imagem_base64 of this Qrcode.  # noqa: E501
        :type: str
        """

        self._imagem_base64 = imagem_base64

    @property
    def pix_link(self):
        """Gets the pix_link of this Qrcode.  # noqa: E501

        URL do PIX para consulta do payload criptografado - Pix Link BACEN  # noqa: E501

        :return: The pix_link of this Qrcode.  # noqa: E501
        :rtype: str
        """
        return self._pix_link

    @pix_link.setter
    def pix_link(self, pix_link):
        """Sets the pix_link of this Qrcode.

        URL do PIX para consulta do payload criptografado - Pix Link BACEN  # noqa: E501

        :param pix_link: The pix_link of this Qrcode.  # noqa: E501
        :type: str
        """

        self._pix_link = pix_link

    @property
    def emv(self):
        """Gets the emv of this Qrcode.  # noqa: E501

        Texto do QR CODE no padrao EMVco  # noqa: E501

        :return: The emv of this Qrcode.  # noqa: E501
        :rtype: str
        """
        return self._emv

    @emv.setter
    def emv(self, emv):
        """Sets the emv of this Qrcode.

        Texto do QR CODE no padrao EMVco  # noqa: E501

        :param emv: The emv of this Qrcode.  # noqa: E501
        :type: str
        """

        self._emv = emv

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Qrcode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Qrcode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
