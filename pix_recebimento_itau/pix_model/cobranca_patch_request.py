# coding: utf-8

"""
    pix_recebimentos

    APis Pix Recebimentos para Clientes (regulatórias).   # noqa: E501

    OpenAPI spec version: 1.40.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CobrancaPatchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'devedor': 'CobrancasDevedor',
        'valor': 'CobrancasValor',
        'calendario': 'CobrancaPutRequestCalendario',
        'info_adicionais': 'list[CobrancasInfoAdicionais]',
        'solicitacao_pagador': 'str',
        'status': 'str'
    }

    attribute_map = {
        'devedor': 'devedor',
        'valor': 'valor',
        'calendario': 'calendario',
        'info_adicionais': 'infoAdicionais',
        'solicitacao_pagador': 'solicitacaoPagador',
        'status': 'status'
    }

    def __init__(self, devedor=None, valor=None, calendario=None, info_adicionais=None, solicitacao_pagador=None, status=None):  # noqa: E501
        """CobrancaPatchRequest - a model defined in Swagger"""  # noqa: E501

        self._devedor = None
        self._valor = None
        self._calendario = None
        self._info_adicionais = None
        self._solicitacao_pagador = None
        self._status = None
        self.discriminator = None

        if devedor is not None:
            self.devedor = devedor
        if valor is not None:
            self.valor = valor
        if calendario is not None:
            self.calendario = calendario
        if info_adicionais is not None:
            self.info_adicionais = info_adicionais
        if solicitacao_pagador is not None:
            self.solicitacao_pagador = solicitacao_pagador
        if status is not None:
            self.status = status

    @property
    def devedor(self):
        """Gets the devedor of this CobrancaPatchRequest.  # noqa: E501


        :return: The devedor of this CobrancaPatchRequest.  # noqa: E501
        :rtype: CobrancasDevedor
        """
        return self._devedor

    @devedor.setter
    def devedor(self, devedor):
        """Sets the devedor of this CobrancaPatchRequest.


        :param devedor: The devedor of this CobrancaPatchRequest.  # noqa: E501
        :type: CobrancasDevedor
        """

        self._devedor = devedor

    @property
    def valor(self):
        """Gets the valor of this CobrancaPatchRequest.  # noqa: E501


        :return: The valor of this CobrancaPatchRequest.  # noqa: E501
        :rtype: CobrancasValor
        """
        return self._valor

    @valor.setter
    def valor(self, valor):
        """Sets the valor of this CobrancaPatchRequest.


        :param valor: The valor of this CobrancaPatchRequest.  # noqa: E501
        :type: CobrancasValor
        """

        self._valor = valor

    @property
    def calendario(self):
        """Gets the calendario of this CobrancaPatchRequest.  # noqa: E501


        :return: The calendario of this CobrancaPatchRequest.  # noqa: E501
        :rtype: CobrancaPutRequestCalendario
        """
        return self._calendario

    @calendario.setter
    def calendario(self, calendario):
        """Sets the calendario of this CobrancaPatchRequest.


        :param calendario: The calendario of this CobrancaPatchRequest.  # noqa: E501
        :type: CobrancaPutRequestCalendario
        """

        self._calendario = calendario

    @property
    def info_adicionais(self):
        """Gets the info_adicionais of this CobrancaPatchRequest.  # noqa: E501

        Cada respectiva informação adicional contida na lista (nome e valor) deve ser apresentada ao pagador  # noqa: E501

        :return: The info_adicionais of this CobrancaPatchRequest.  # noqa: E501
        :rtype: list[CobrancasInfoAdicionais]
        """
        return self._info_adicionais

    @info_adicionais.setter
    def info_adicionais(self, info_adicionais):
        """Sets the info_adicionais of this CobrancaPatchRequest.

        Cada respectiva informação adicional contida na lista (nome e valor) deve ser apresentada ao pagador  # noqa: E501

        :param info_adicionais: The info_adicionais of this CobrancaPatchRequest.  # noqa: E501
        :type: list[CobrancasInfoAdicionais]
        """

        self._info_adicionais = info_adicionais

    @property
    def solicitacao_pagador(self):
        """Gets the solicitacao_pagador of this CobrancaPatchRequest.  # noqa: E501

        O campo solicitacaoPagador, determina um texto a ser apresentado ao pagador para que ele possa digitar uma informação correlata, em formato livre, a ser enviada ao recebedor  # noqa: E501

        :return: The solicitacao_pagador of this CobrancaPatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._solicitacao_pagador

    @solicitacao_pagador.setter
    def solicitacao_pagador(self, solicitacao_pagador):
        """Sets the solicitacao_pagador of this CobrancaPatchRequest.

        O campo solicitacaoPagador, determina um texto a ser apresentado ao pagador para que ele possa digitar uma informação correlata, em formato livre, a ser enviada ao recebedor  # noqa: E501

        :param solicitacao_pagador: The solicitacao_pagador of this CobrancaPatchRequest.  # noqa: E501
        :type: str
        """

        self._solicitacao_pagador = solicitacao_pagador

    @property
    def status(self):
        """Gets the status of this CobrancaPatchRequest.  # noqa: E501

        Status da Cobrança  # noqa: E501

        :return: The status of this CobrancaPatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CobrancaPatchRequest.

        Status da Cobrança  # noqa: E501

        :param status: The status of this CobrancaPatchRequest.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CobrancaPatchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CobrancaPatchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
