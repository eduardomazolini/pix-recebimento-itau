# coding: utf-8

"""
    pix_recebimentos

    APis Pix Recebimentos para Clientes (regulatórias).   # noqa: E501

    OpenAPI spec version: 1.40.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WebhooksParametros(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'paginacao': 'WebhooksParametrosPaginacao',
        'inicio': 'str',
        'fim': 'str'
    }

    attribute_map = {
        'paginacao': 'paginacao',
        'inicio': 'inicio',
        'fim': 'fim'
    }

    def __init__(self, paginacao=None, inicio=None, fim=None):  # noqa: E501
        """WebhooksParametros - a model defined in Swagger"""  # noqa: E501

        self._paginacao = None
        self._inicio = None
        self._fim = None
        self.discriminator = None

        self.paginacao = paginacao
        if inicio is not None:
            self.inicio = inicio
        if fim is not None:
            self.fim = fim

    @property
    def paginacao(self):
        """Gets the paginacao of this WebhooksParametros.  # noqa: E501


        :return: The paginacao of this WebhooksParametros.  # noqa: E501
        :rtype: WebhooksParametrosPaginacao
        """
        return self._paginacao

    @paginacao.setter
    def paginacao(self, paginacao):
        """Sets the paginacao of this WebhooksParametros.


        :param paginacao: The paginacao of this WebhooksParametros.  # noqa: E501
        :type: WebhooksParametrosPaginacao
        """
        if paginacao is None:
            raise ValueError("Invalid value for `paginacao`, must not be `None`")  # noqa: E501

        self._paginacao = paginacao

    @property
    def inicio(self):
        """Gets the inicio of this WebhooksParametros.  # noqa: E501

        Data início da criação do webhook, no formato de acordo com RFC 3339  # noqa: E501

        :return: The inicio of this WebhooksParametros.  # noqa: E501
        :rtype: str
        """
        return self._inicio

    @inicio.setter
    def inicio(self, inicio):
        """Sets the inicio of this WebhooksParametros.

        Data início da criação do webhook, no formato de acordo com RFC 3339  # noqa: E501

        :param inicio: The inicio of this WebhooksParametros.  # noqa: E501
        :type: str
        """

        self._inicio = inicio

    @property
    def fim(self):
        """Gets the fim of this WebhooksParametros.  # noqa: E501

        Data fim da criação do webhook, em formato de acordo com RFC 3339.  # noqa: E501

        :return: The fim of this WebhooksParametros.  # noqa: E501
        :rtype: str
        """
        return self._fim

    @fim.setter
    def fim(self, fim):
        """Sets the fim of this WebhooksParametros.

        Data fim da criação do webhook, em formato de acordo com RFC 3339.  # noqa: E501

        :param fim: The fim of this WebhooksParametros.  # noqa: E501
        :type: str
        """

        self._fim = fim

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhooksParametros, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhooksParametros):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
